head()
tidy_tab %>%
rename(miles_per_gallon = mpg,
cyl = cylinders)
tidy_tab %>%
select(mpg,displacement,horsepower,weight)
tidy_tab %>%
filter(mpg>22, manufacturer=="audi")
tidy_tab
View(tidy_tab)
View(tidy_tab)
write.csv(mpg)
write.csv(mpg,"mpg.csv")
#Base R
base_tab <- read.csv("data/mpg.csv")
base_tab %>% head()
#readR
tidy_tab <- read_csv("data/mpg.csv")
tidy_tab %>% head()
base_tab %>%
class()
tidy_tab %>%
class()
#Take a loot at this data.frame.
tidy_tab %>%
head()
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
narrow <- tidy_tab %>%
gather(key="specification",value="measurement",1:5)
narrow %>%
head()
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
wide <- narrow %>%
spread(key="specification",value="measurement")
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
narrow <- tidy_tab %>%
gather(key="specification",value="measurement",1:5)
narrow %>%
head()
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
wide <- narrow %>%
spread(key="specification",value="measurement")
tidy_tab
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
narrow <- tidy_tab %>%
gather(key="specification",value="measurement",1:5)
narrow %>%
head()
narrow
#Base R
base_tab <- read.csv("data/mpg.csv")
base_tab %>% head()
#readR
tidy_tab <- read_csv("data/mpg.csv")
tidy_tab %>% head()
#Take a loot at this data.frame.
tidy_tab %>%
head()
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
narrow <- tidy_tab %>%
gather(key="specification",value="measurement",1:5)
narrow %>%
head()
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
wide <- narrow %>%
spread(key="specification",value="measurement")
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
wide <- narrow %>%
spread(key="specification",value="measurement")
wide
narrow
mpg
iris
write.csv(iris,"data/iris.csv")
base_tab %>%
class()
tidy_tab %>%
class()
#Take a loot at this data.frame.
tidy_tab %>%
head()
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
narrow <- tidy_tab %>%
gather(key="specification",value="measurement",1:5)
narrow %>%
head()
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
wide <- narrow %>%
spread(key="specification",value="measurement")
#Take a loot at this data.frame.
tidy_tab %>%
head()
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
narrow <- tidy_tab %>%
gather(key="specification",value="measurement",1:5)
narrow %>%
head()
narrow
#Base R
base_tab <- read.csv("data/iris.csv")
base_tab %>% head()
#readR
tidy_tab <- read_csv("data/iris.csv")
tidy_tab %>% head()
tidy_tab
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
narrow <- tidy_tab %>%
gather(key="specification",value="measurement",1:4)
narrow
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
narrow <- tidy_tab %>%
gather(key="measurement",value="value",1:4)
narrow %>%
head()
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
wide <- narrow %>%
spread(key="measurement",value="value")
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
narrow <- tidy_tab %>%
gather(key="measurement",value="value",1:4)
narrow %>%
head()
narrow
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
wide <- narrow %>%
spread(measurement,value)
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
narrow <- tidy_tab %>%
gather(key=measurement,value=value,1:4)
narrow
narrow %>%
head()
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
wide <- narrow %>%
spread(measurement,value)
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
narrow <- tidy_tab %>%
gather(measurement,value,1:4)
narrow %>%
head()
narrow
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
wide <- narrow %>%
spread(measurement,value)
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
wide <- narrow %>%
spread(value,measurement)
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
mpg %>% head()
wide <- mpg %>%
spread(model,displ)
stocks
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4))
stocksm <- stocks %>% gather(stock, price, -time)
stocksm %>% spread(stock, price)
stocksm <- stocks %>% gather(stock, price, -time)
#Take a loot at this data.frame.
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4))
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
narrow <- tidy_tab %>%
gather(measurement,value,1:4)
narrow %>%
head()
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
stocksm <- stocks %>% gather(stock, price, -time)
stocksm %>% spread(stock, price)
#Take a loot at this data.frame.
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4))
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
stocksm <- stocks %>% gather(stock, price, -time)
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
stocksm %>% spread(stock, price)
#Take a loot at this data.frame.
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4))
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
stocksm <- stocks %>% gather(stock, price, -time)
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
stocksm %>% spread(stock, price)
#Take a loot at this data.frame.
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4))
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
stocksm <- stocks %>% gather(stock, price, -time)
stocksm %>%
head()
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
stocksm %>% spread(stock, price)
#Take a loot at this data.frame.
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4))
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
stock_narrow <- stocks %>%
gather(stock, price, -time)
stock_narrow %>%
head()
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
stocksm %>%
spread(stock, price)
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
stock_narrow <- stocks %>%
gather(stock, price, -time)
stock_narrow %>%
head()
stock_narrow %>%
head()
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
stock_wide <- stocksm %>%
spread(stock, price)
#Take a loot at this data.frame.
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4))
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
stock_narrow <- stocks %>%
gather(stock, price, -time)
stock_narrow %>%
head()
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
stock_wide <- stocksm %>%
spread(stock, price)
stock_wide %>%
head()
mpg %>%
head()
tidy_tab %>%
rename(miles_per_gallon = mpg,
cyl = cylinders)
mpg
mpg %>%
rename(company = manufacturer,
HWY = hwy)
mpg %>%
rename(company = manufacturer,
cyllinders = cyl)
mpg %>%
select(model,year,trans)
mpg$cyl
mpg$cyl %>% mean()
mpg %>%
filter(cyl>5, manufacturer=="audi")
mpg %>% head()
mpg %>%
mutate(cty_hwy=cty*hwy)
mpg %>%
count(model)
mpg %>%
arrange(year)
mpg %>%
arrange(cyl)
mpg %>%
arrange(cyl)
mpg %>%
filte(manufacturer=="audi")%>%
arrange(cyl)
mpg %>%
filter(manufacturer=="audi")%>%
arrange(cyl)
mpg
mpg %>%
group_by(manufacturer,model) %>%
summarise(mean_cyl=mean(cyl))
mpg %>%
group_by(manufacturer,model) %>%
summarise(mean_cyl=mean(cyl),
sd_cyl=sd(cyl))
mpg %>%
group_by(manufacturer,model) %>%
summarise(mean_cyl=mean(cyl),
sd_cyl=sd(cyl),
q05_cyl=quantile(cyl,0.025),
q95_cyl=quantile(cyl,0.975))
mpg
mpg %>%
group_by(manufacturer,model) %>%
summarise(mean_cyl=mean(cyl),
sd_cyl=sd(cyl))
mpg %>%
ggplot(aes(displ, hwy, colour = class)) +
geom_point()
#Take a loot at this data.frame.
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4))
#Sometimes we need to organize the data in a different way in order to plot it or perform some analysis.
#Imagine we want to represent two variables called specification and value for columns 1:5 and represent it in a tidydata. We can use the function gather.
stock_narrow <- stocks %>%
gather(stock, price, -time)
stock_narrow %>%
head()
#We can also do the opposite to gather, which is spread. This convert our narrow-data into wide date.
stock_wide <- stock_narrow %>%
spread(stock, price)
stock_wide %>%
head()
mpg %>%
filter(manufacturer=="audi")%>%
arrange(cyl)
packages <- c('ggrepel','patchwork',
'ggraph','patchwork','gganimate',
'gifski','ggrepel','ggforce','ggraph',
'ggthemes','maps','sf','concaveman','remotes')
# Uncomment the next lines (remove the first #) to install the packages
# install.packages(packages)
# remotes::install_github("hrbrmstr/hrbrthemes")
# Load standard packages
library(ggplot2)
data("faithful")
# Basic scatterplot
ggplot(data = faithful,
mapping = aes(x = eruptions, y = waiting)) +
geom_point()
# Data and mapping can be given both as global (in ggplot()) or per layer
ggplot() +
geom_point(mapping = aes(x = eruptions, y = waiting),
data = faithful)
ggplot(faithful) +
geom_point(aes(x = eruptions, y = waiting, colour = eruptions < 3))
ggplot(faithful) +
geom_point(aes(x = eruptions, y = waiting),
colour = 'steelblue')
ggplot(faithful) +
geom_histogram(aes(x = eruptions))
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_density_2d() +
geom_point()
data("mpg")
ggplot(mpg) +
geom_bar(aes(x = class))
mpg_counted <- mpg %>%
count(class, name = 'count')
ggplot(mpg_counted) +
geom_bar(aes(x = class, y = count), stat = 'identity')
library(broom)
mod <- lm(mpg ~ wt + qsec, data = mtcars)
mod
tidy(mod)
augment(mod)
glimpse(mod)
glance(mod)
Orange <- Orange %>%
as_tibble()
Orange <- Orange %>%
as_tibble()
Orange
Orange <- Orange %>%
as_tibble()
Orange %>%
head()
Orange1 <- Orange %>%
as_tibble()
Orange %>%
head()
oranges %>% nest(-Tree)
oranges <- Orange %>%
as_tibble()
oranges %>%
head()
oranges %>% nest(-Tree)
nested <- oranges %>% nest(-Tree)
nested
nested %>%
mutate(test = map(data, ~ cor.test(.x$age, .x$circumference)))
nested <- nested %>%
mutate(test = map(data, ~ cor.test(.x$age, .x$circumference)))
nested
nested <- nested %>%
mutate(test = map(data, ~ cor.test(.x$age, .x$circumference)))
nested$test
nested <- nested %>%
mutate(test = map(data, ~ cor.test(.x$age, .x$circumference)))
#Look what nested$test is
#nested$test
nested <- nested %>%
mutate(test = map(data, ~ cor.test(.x$age, .x$circumference)),
tidied = map(test,tidy),
augment = map(test,augment),
glanced = map(test,glance))
nested <- nested %>%
mutate(test = map(data, ~ cor.test(.x$age, .x$circumference)),
tidied = map(test,tidy),
augment = map(test,augment),
glanced = map(test,glance))
nested <- nested %>%
mutate(test = map(data, ~ cor.test(.x$age, .x$circumference)),
tidied = map(test,tidy),
augment = map(test,augment))
nested <- nested %>%
mutate(test = map(data, ~ cor.test(.x$age, .x$circumference)),
tidied = map(test,tidy),
augment = map(test,augment))
nested <- nested %>%
mutate(test = map(data, ~ cor.test(.x$age, .x$circumference)),
tidied = map(test,tidy))
nested <- oranges %>% nest(-Tree)
nested
nested <- nested %>%
mutate(test = map(data, ~ cor.test(.x$age, .x$circumference)),
tidied = map(test,tidy))
nested <- nested %>%
mutate(test = map(data, ~ cor.test(.x$age, .x$circumference)),
tidied = map(test,tidy),
augment = map(test,augment),
glanced = map(test,glance))
nested <- oranges %>% nest(-Tree)
nested
nested <- nested %>%
mutate(test = map(data, ~ cor.test(.x$age, .x$circumference)),
tidied = map(test,tidy),
augment = map(test,augment),
glanced = map(test,glance))
oranges <- Orange %>%
as_tibble()
oranges %>%
head()
nested <- oranges %>% nest(-Tree)
nested
nested <- nested %>%
mutate(test = map(data, ~ cor.test(.x$age, .x$circumference)),
tidied = map(test,tidy),
augment = map(test,augment),
glanced = map(test,glance))
nested <- nested %>%
mutate(test = map(data, ~ cor.test(.x$age, .x$circumference)))
nested <- nested %>%
mutate(test = map(data, ~ cor.test(.x$age, .x$circumference)))
nested %>%
mutate(augmented = map(test,augment))
nested <- nested %>%
mutate(test = map(data, ~ lm(.x$age, .x$circumference)))
nested <- nested %>%
mutate(test = map(data, ~ lm(.x$age~.x$circumference)))
nested %>%
mutate(augmented = map(test,augment))
nested <- nested %>%
mutate(test = map(data, ~ lm(.x$age~.x$circumference)),
augmented = map(test,augment),
tidied = map(test,tidy),
glanced = map(test,glance))
nested <- nested %>%
mutate(test = map(data, ~ lm(.x$age~.x$circumference)),
augmented = map(test,augment),
tidied = map(test,tidy))
ggplot(mpg) +
geom_bar(aes(x = factor(cyl)))
ggplot(mpg) +
geom_bar(aes(x = factor(cyl))) +
labs(title = 'Number of cars in {closest_state} by number of cylinders') +
transition_states(states = year) +
enter_grow() +
exit_fade()
ggplot(economics) +
geom_line(aes(x = date, y = unemploy))
library(gganimate)
ggplot(economics) +
geom_line(aes(x = date, y = unemploy)) +
transition_reveal(along = date)
ggplot(mpg) +
geom_bar(aes(x = factor(cyl)))
ggplot(mpg) +
geom_bar(aes(x = factor(cyl))) +
labs(title = 'Number of cars in {closest_state} by number of cylinders') +
transition_states(states = year) +
enter_grow() +
exit_fade()
ggplot(mtcars, aes(x = disp, y = mpg)) +
geom_point() +
geom_text(aes(label = row.names(mtcars)))
